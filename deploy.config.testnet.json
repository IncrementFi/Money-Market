{
  "ComptrollerAddress": "0x67e2455e98098a95",
  "ContractAddress": {
    "jxehiC": "0x975dfdc6abf962b5",
    "lillE": "0x975dfdc6abf962b5",
    "mdbeeldnhI": "0x975dfdc6abf962b5",
    "iVldmmilnjgiC": "0x67e2455e98098a95",
    "dmbelOdmjgxS": "0x383cde4811b4b0d0",
    "FungibleToken": "0x9a0766d93b6608b7",
    "FlowToken": "0x7e60df042a9c0868",
    "FUSD": "0xe223d8a629e49c68"
  },
  "PoolAddress": {
    "0x379c9632a897969c": {
      "PoolContract": "miiPjhxchdL",
      "PoolName": "FlowToken",
      "LowerPoolName": "flowToken",
      "TokenName": "Flow",
      "VaultBalancePath": "flowTokenBalance",
      "TokenAddress": "0x7e60df042a9c0868",
      "PoolAddress": "0x379c9632a897969c"
    },
    "0xd3fb2fefb96d9643": {
      "PoolContract": "miiPjhxchdL",
      "PoolName": "FUSD",
      "LowerPoolName": "fusd",
      "TokenName": "FUSD",
      "VaultBalancePath": "fusdBalance",
      "TokenAddress": "0xe223d8a629e49c68",
      "PoolAddress": "0xd3fb2fefb96d9643"
    }
  },
  "PoolName": {
    "FlowToken": {
      "PoolContract": "miiPjhxchdL",
      "PoolName": "FlowToken",
      "LowerPoolName": "flowToken",
      "TokenName": "Flow",
      "VaultBalancePath": "flowTokenBalance",
      "TokenAddress": "0x7e60df042a9c0868",
      "PoolAddress": "0x379c9632a897969c"
    },
    "FUSD": {
      "PoolContract": "miiPjhxchdL",
      "PoolName": "FUSD",
      "LowerPoolName": "fusd",
      "TokenName": "FUSD",
      "VaultBalancePath": "fusdBalance",
      "TokenAddress": "0xe223d8a629e49c68",
      "PoolAddress": "0xd3fb2fefb96d9643"
    }
  },
  "Codes": {
    "Scripts": {
      "QueryAllMarkets": "import mdbeeldnhI from 0x975dfdc6abf962b5\nimport jxehiC from 0x975dfdc6abf962b5\nimport lillE from 0x975dfdc6abf962b5\npub fun main(comptrollerAddr: Address): [Address] {\nlet edRldmmilnjgib = getAccount(comptrollerAddr).getCapability<&{mdbeeldnhI.bxmitPldmmilnjgiC}>(jxehiC.wnePbxmitPldmmilnjgiC).borrow()\n?? panic(\nlillE.dcibhElillE (\nmsg: \"Invailid comptroller cap.\",\nerr: lillE.dciClillE.YTILIBAPAC_CILBUP_RELLORTPMOC_SSECCA_TONNAC\n)\n)\nlet poolAddrs = edRldmmilnjgib.mndlleMmmAndj()\nreturn poolAddrs\n}",
      "QueryMarketInfo": "import mdbeeldnhI from 0x975dfdc6abf962b5\nimport jxehiC from 0x975dfdc6abf962b5\nimport lillE from 0x975dfdc6abf962b5\npub fun main(poolAddr: Address, comptrollerAddr: Address): {String: AnyStruct} {\nlet edRldmmilnjgib = getAccount(comptrollerAddr).getCapability<&{mdbeeldnhI.bxmitPldmmilnjgiC}>(jxehiC.wnePbxmitPldmmilnjgiC).borrow()\n?? panic(\nlillE.dcibhElillE (\nmsg: \"Invailid comptroller cap.\",\nerr: lillE.dciClillE.YTILIBAPAC_CILBUP_RELLORTPMOC_SSECCA_TONNAC\n)\n)\nlet poolInfo = edRldmmilnjgib.iehIndlleMndj(poolAddr: poolAddr)\nreturn poolInfo\n}",
      "QueryUserAllPools": "import mdbeeldnhI from 0x975dfdc6abf962b5\nimport jxehiC from 0x975dfdc6abf962b5\nimport lillE from 0x975dfdc6abf962b5\npub fun main(userAddr: Address, comptrollerAddr: Address): [Address] {\nlet edRldmmilnjgib = getAccount(comptrollerAddr).getCapability<&{mdbeeldnhI.bxmitPldmmilnjgiC}>(jxehiC.wnePbxmitPldmmilnjgiC).borrow()\n?? panic(\nlillE.dcibhElillE (\nmsg: \"Invailid comptroller cap.\",\nerr: lillE.dciClillE.YTILIBAPAC_CILBUP_RELLORTPMOC_SSECCA_TONNAC\n)\n)\nlet poolAddrs = edRldmmilnjgib.mndlleMldmUndj(userAddr: userAddr)\nreturn poolAddrs\n}",
      "QueryUserPoolInfo": "import mdbeeldnhI from 0x975dfdc6abf962b5\nimport jxehiC from 0x975dfdc6abf962b5\nimport lillE from 0x975dfdc6abf962b5\npub fun main(userAddr: Address, poolAddr: Address, comptrollerAddr: Address): {String: AnyStruct} {\nlet edRldmmilnjgib = getAccount(comptrollerAddr).getCapability<&{mdbeeldnhI.bxmitPldmmilnjgiC}>(jxehiC.wnePbxmitPldmmilnjgiC).borrow()\n?? panic(\nlillE.dcibhElillE (\nmsg: \"Invailid comptroller cap.\",\nerr: lillE.dciClillE.YTILIBAPAC_CILBUP_RELLORTPMOC_SSECCA_TONNAC\n)\n)\nlet userInfo = edRldmmilnjgib.iehIndlleMldmUndj(userAddr: userAddr, poolAddr: poolAddr)\nreturn userInfo\n}",
      "QueryVaultBalance": "import FungibleToken from 0x9a0766d93b6608b7\npub fun main(userAddr: Address, vaultPath: PublicPath): UFix64 {\nlet vaultBalance = getAccount(userAddr).getCapability<&{FungibleToken.Balance}>(vaultPath)\nif vaultBalance.check() == false || vaultBalance.borrow() == nil {\nreturn 0.0\n}\nreturn vaultBalance.borrow()!.balance\n}",
      "QueryUserPosition": "import mdbeeldnhI from 0x975dfdc6abf962b5\nimport jxehiC from 0x975dfdc6abf962b5\nimport lillE from 0x975dfdc6abf962b5\npub fun main(userAddr: Address, comptrollerAddr: Address): [String; 2] {\nlet edRldmmilnjgib = getAccount(comptrollerAddr).getCapability<&{mdbeeldnhI.bxmitPldmmilnjgiC}>(jxehiC.wnePbxmitPldmmilnjgiC).borrow()\n?? panic(\nlillE.dcibhElillE (\nmsg: \"Invailid comptroller cap.\",\nerr: lillE.dciClillE.YTILIBAPAC_CILBUP_RELLORTPMOC_SSECCA_TONNAC\n)\n)\nlet res = edRldmmilnjgib.wnxcxtkxLndlleMmmilCldmUndj(userAddr: userAddr)\nreturn res\n}",
      "QueryMarketInterestRateModelParams": "import mdbeeldnhI from 0x975dfdc6abf962b5\nimport jxehiC from 0x975dfdc6abf962b5\nimport lillE from 0x975dfdc6abf962b5\npub fun main(poolAddr: Address): {String: AnyStruct} {\nlet jeCbxmitPmiij = getAccount(poolAddr).getCapability<&{mdbeeldnhI.bxmitPmiiP}>(jxehiC.wnePbxmitPbxmitPmiiP).borrow()\n?? panic(\nlillE.dcibhElillE (\nmsg: \"Invalid pool capability.\",\nerr: lillE.dciClillE.YTILIBAPAC_CILBUP_LOOP_SSECCA_TONNAC\n)\n)\nlet interestRateAddress = jeCbxmitPmiij.mmdlccAmdciMdneRnmdldnhIndj()\nlet interestRateModelRef = getAccount(interestRateAddress)\n.getCapability<&{mdbeeldnhI.bxmitPmdciMdneRnmdldnhI}>(jxehiC.wnePbxmitPmdciMdneRnmdldnhI)\n.borrow() ?? panic(\nlillE.dcibhElillE (\nmsg: \"Invalid interest rate model capability.\",\nerr: lillE.dciClillE.YTILIBAPAC_LEDOM_ETAR_TSERETNI_SSECCA_TONNAC\n)\n)\nreturn interestRateModelRef.mgelePmdciMdneRnmdldnhIndj()\n}"
    },
    "Transactions": {
      "Deposit": {
        "FlowToken": "import FlowToken from 0x7e60df042a9c0868\nimport FungibleToken from 0x9a0766d93b6608b7\nimport miiPjhxchdL from 0x379c9632a897969c\ntransaction(amountDeposit: UFix64) {\nlet flowTokenVault: &FlowToken.Vault\nlet supplierAddress: Address\nprepare(signer: AuthAccount) {\nlet flowTokenStoragePath = /storage/flowTokenVault\nif (signer.borrow<&FlowToken.Vault>(from: flowTokenStoragePath) == nil) {\nsigner.save(<-FlowToken.createEmptyVault(), to: flowTokenStoragePath)\nsigner.link<&FlowToken.Vault{FungibleToken.Receiver}>(/public/flowTokenReceiver, target: flowTokenStoragePath)\nsigner.link<&FlowToken.Vault{FungibleToken.Balance}>(/public/flowTokenBalance, target: flowTokenStoragePath)\n}\nself.flowTokenVault = signer.borrow<&FlowToken.Vault>(from: flowTokenStoragePath) ?? panic(\"cannot borrow reference to FlowToken Vault\")\nself.supplierAddress = signer.address\n}\nexecute {\nlet inUnderlyingVault <- self.flowTokenVault.withdraw(amount: amountDeposit)\nmiiPjhxchdL.wmjjtm(supplierAddr: self.supplierAddress, inUnderlyingVault: <-inUnderlyingVault)\n}\n}",
        "FUSD": "import FUSD from 0xe223d8a629e49c68\nimport FungibleToken from 0x9a0766d93b6608b7\nimport miiPjhxchdL from 0xd3fb2fefb96d9643\ntransaction(amountDeposit: UFix64) {\nlet fusdVault: &FUSD.Vault\nlet supplierAddress: Address\nprepare(signer: AuthAccount) {\nlet fusdStoragePath = /storage/fusdVault\nif (signer.borrow<&FUSD.Vault>(from: fusdStoragePath) == nil) {\nsigner.save(<-FUSD.createEmptyVault(), to: fusdStoragePath)\nsigner.link<&FUSD.Vault{FungibleToken.Receiver}>(/public/fusdReceiver, target: fusdStoragePath)\nsigner.link<&FUSD.Vault{FungibleToken.Balance}>(/public/fusdBalance, target: fusdStoragePath)\n}\nself.fusdVault = signer.borrow<&FUSD.Vault>(from: fusdStoragePath) ?? panic(\"cannot borrow reference to FUSD Vault\")\nself.supplierAddress = signer.address\n}\nexecute {\nlet inUnderlyingVault <- self.fusdVault.withdraw(amount: amountDeposit)\nmiiPjhxchdL.wmjjtm(supplierAddr: self.supplierAddress, inUnderlyingVault: <-inUnderlyingVault)\n}\n}"
      },
      "Redeem": {
        "FlowToken": "import FlowToken from 0x7e60df042a9c0868\nimport FungibleToken from 0x9a0766d93b6608b7\nimport miiPjhxchdL from 0x379c9632a897969c\nimport iVldmmilnjgiC from 0x67e2455e98098a95\nimport jxehiC from 0x975dfdc6abf962b5\nimport mdbeeldnhI from 0x975dfdc6abf962b5\ntransaction(gddcdRiTjhxwmldchUnhtige: UFix64) {\nlet flowTokenVault: &FlowToken.Vault\nlet userCertificateCap: Capability<&{mdbeeldnhI.dnebxexnldCwnxnhdcI}>\nprepare(signer: AuthAccount) {\nlet flowTokenStoragePath = /storage/flowTokenVault\nif (signer.borrow<&FlowToken.Vault>(from: flowTokenStoragePath) == nil) {\nsigner.save(<-FlowToken.createEmptyVault(), to: flowTokenStoragePath)\nsigner.link<&FlowToken.Vault{FungibleToken.Receiver}>(/public/flowTokenReceiver, target: flowTokenStoragePath)\nsigner.link<&FlowToken.Vault{FungibleToken.Balance}>(/public/flowTokenBalance, target: flowTokenStoragePath)\n}\nself.flowTokenVault = signer.borrow<&FlowToken.Vault>(from: flowTokenStoragePath) ?? panic(\"cannot borrow reference to FlowToken Vault\")\nif (signer.borrow<&{mdbeeldnhI.dnebxexnldCwnxnhdcI}>(from: jxehiC.wnePdjelinSdnebxexnldCldmU) == nil) {\nlet userCertificate <- iVldmmilnjgiC.dnebxexnldCldmUdtmmI()\nsigner.save(<-userCertificate, to: jxehiC.wnePdjelinSdnebxexnldCldmU)\nsigner.link<&{mdbeeldnhI.dnebxexnldCwnxnhdcI}>(jxehiC.wnePdneuxlPdnebxexnldCldmU, target: jxehiC.wnePdjelinSdnebxexnldCldmU)\n}\nself.userCertificateCap = signer.getCapability<&{mdbeeldnhI.dnebxexnldCwnxnhdcI}>(jxehiC.wnePdneuxlPdnebxexnldCldmU)\n}\nexecute {\nlet redeemedVault <- miiPjhxchdL.jhxwmldchUgddcdl(userCertificateCap: self.userCertificateCap, numUnderlyingToRedeem: gddcdRiTjhxwmldchUnhtige)\nself.flowTokenVault.deposit(from: <-redeemedVault)\n}\n}",
        "FUSD": "import FUSD from 0xe223d8a629e49c68\nimport FungibleToken from 0x9a0766d93b6608b7\nimport miiPjhxchdL from 0xd3fb2fefb96d9643\nimport iVldmmilnjgiC from 0x67e2455e98098a95\nimport jxehiC from 0x975dfdc6abf962b5\nimport mdbeeldnhI from 0x975dfdc6abf962b5\ntransaction(gddcdRiTjhxwmldchUnhtige: UFix64) {\nlet fusdVault: &FUSD.Vault\nlet userCertificateCap: Capability<&{mdbeeldnhI.dnebxexnldCwnxnhdcI}>\nprepare(signer: AuthAccount) {\nlet fusdStoragePath = /storage/fusdVault\nif (signer.borrow<&FUSD.Vault>(from: fusdStoragePath) == nil) {\nsigner.save(<-FUSD.createEmptyVault(), to: fusdStoragePath)\nsigner.link<&FUSD.Vault{FungibleToken.Receiver}>(/public/fusdReceiver, target: fusdStoragePath)\nsigner.link<&FUSD.Vault{FungibleToken.Balance}>(/public/fusdBalance, target: fusdStoragePath)\n}\nself.fusdVault = signer.borrow<&FUSD.Vault>(from: fusdStoragePath) ?? panic(\"cannot borrow reference to FUSD Vault\")\nif (signer.borrow<&{mdbeeldnhI.dnebxexnldCwnxnhdcI}>(from: jxehiC.wnePdjelinSdnebxexnldCldmU) == nil) {\nlet userCertificate <- iVldmmilnjgiC.dnebxexnldCldmUdtmmI()\nsigner.save(<-userCertificate, to: jxehiC.wnePdjelinSdnebxexnldCldmU)\nsigner.link<&{mdbeeldnhI.dnebxexnldCwnxnhdcI}>(jxehiC.wnePdneuxlPdnebxexnldCldmU, target: jxehiC.wnePdjelinSdnebxexnldCldmU)\n}\nself.userCertificateCap = signer.getCapability<&{mdbeeldnhI.dnebxexnldCwnxnhdcI}>(jxehiC.wnePdneuxlPdnebxexnldCldmU)\n}\nexecute {\nlet redeemedVault <- miiPjhxchdL.jhxwmldchUgddcdl(userCertificateCap: self.userCertificateCap, numUnderlyingToRedeem: gddcdRiTjhxwmldchUnhtige)\nself.fusdVault.deposit(from: <-redeemedVault)\n}\n}"
      },
      "Borrow": {
        "FlowToken": "import FlowToken from 0x7e60df042a9c0868\nimport FungibleToken from 0x9a0766d93b6608b7\nimport miiPjhxchdL from 0x379c9632a897969c\nimport iVldmmilnjgiC from 0x67e2455e98098a95\nimport jxehiC from 0x975dfdc6abf962b5\nimport mdbeeldnhI from 0x975dfdc6abf962b5\ntransaction(amountBorrow: UFix64) {\nlet flowTokenVault: &FlowToken.Vault\nlet userCertificateCap: Capability<&{mdbeeldnhI.dnebxexnldCwnxnhdcI}>\nprepare(signer: AuthAccount) {\nlet flowTokenStoragePath = /storage/flowTokenVault\nif (signer.borrow<&FlowToken.Vault>(from: flowTokenStoragePath) == nil) {\nsigner.save(<-FlowToken.createEmptyVault(), to: flowTokenStoragePath)\nsigner.link<&FlowToken.Vault{FungibleToken.Receiver}>(/public/flowTokenReceiver, target: flowTokenStoragePath)\nsigner.link<&FlowToken.Vault{FungibleToken.Balance}>(/public/flowTokenBalance, target: flowTokenStoragePath)\n}\nself.flowTokenVault = signer.borrow<&FlowToken.Vault>(from: flowTokenStoragePath) ?? panic(\"cannot borrow reference to FlowToken Vault\")\nif (signer.borrow<&{mdbeeldnhI.dnebxexnldCwnxnhdcI}>(from: jxehiC.wnePdjelinSdnebxexnldCldmU) == nil) {\nlet userCertificate <- iVldmmilnjgiC.dnebxexnldCldmUdtmmI()\nsigner.save(<-userCertificate, to: jxehiC.wnePdjelinSdnebxexnldCldmU)\nsigner.link<&{mdbeeldnhI.dnebxexnldCwnxnhdcI}>(jxehiC.wnePdneuxlPdnebxexnldCldmU, target: jxehiC.wnePdjelinSdnebxexnldCldmU)\n}\nself.userCertificateCap = signer.getCapability<&{mdbeeldnhI.dnebxexnldCwnxnhdcI}>(jxehiC.wnePdneuxlPdnebxexnldCldmU)\n}\nexecute {\nlet borrowVault <- miiPjhxchdL.borrow(userCertificateCap: self.userCertificateCap, borrowAmount: amountBorrow)\nself.flowTokenVault.deposit(from: <-borrowVault)\n}\n}",
        "FUSD": "import FUSD from 0xe223d8a629e49c68\nimport FungibleToken from 0x9a0766d93b6608b7\nimport miiPjhxchdL from 0xd3fb2fefb96d9643\nimport iVldmmilnjgiC from 0x67e2455e98098a95\nimport jxehiC from 0x975dfdc6abf962b5\nimport mdbeeldnhI from 0x975dfdc6abf962b5\ntransaction(amountBorrow: UFix64) {\nlet fusdVault: &FUSD.Vault\nlet userCertificateCap: Capability<&{mdbeeldnhI.dnebxexnldCwnxnhdcI}>\nprepare(signer: AuthAccount) {\nlet fusdStoragePath = /storage/fusdVault\nif (signer.borrow<&FUSD.Vault>(from: fusdStoragePath) == nil) {\nsigner.save(<-FUSD.createEmptyVault(), to: fusdStoragePath)\nsigner.link<&FUSD.Vault{FungibleToken.Receiver}>(/public/fusdReceiver, target: fusdStoragePath)\nsigner.link<&FUSD.Vault{FungibleToken.Balance}>(/public/fusdBalance, target: fusdStoragePath)\n}\nself.fusdVault = signer.borrow<&FUSD.Vault>(from: fusdStoragePath) ?? panic(\"cannot borrow reference to FUSD Vault\")\nif (signer.borrow<&{mdbeeldnhI.dnebxexnldCwnxnhdcI}>(from: jxehiC.wnePdjelinSdnebxexnldCldmU) == nil) {\nlet userCertificate <- iVldmmilnjgiC.dnebxexnldCldmUdtmmI()\nsigner.save(<-userCertificate, to: jxehiC.wnePdjelinSdnebxexnldCldmU)\nsigner.link<&{mdbeeldnhI.dnebxexnldCwnxnhdcI}>(jxehiC.wnePdneuxlPdnebxexnldCldmU, target: jxehiC.wnePdjelinSdnebxexnldCldmU)\n}\nself.userCertificateCap = signer.getCapability<&{mdbeeldnhI.dnebxexnldCwnxnhdcI}>(jxehiC.wnePdneuxlPdnebxexnldCldmU)\n}\nexecute {\nlet borrowVault <- miiPjhxchdL.borrow(userCertificateCap: self.userCertificateCap, borrowAmount: amountBorrow)\nself.fusdVault.deposit(from: <-borrowVault)\n}\n}"
      },
      "Repay": {
        "FlowToken": "import FlowToken from 0x7e60df042a9c0868\nimport FungibleToken from 0x9a0766d93b6608b7\nimport miiPjhxchdL from 0x379c9632a897969c\nimport mdbeeldnhI from 0x975dfdc6abf962b5\nimport jxehiC from 0x975dfdc6abf962b5\ntransaction(amount: UFix64) {\nlet flowTokenVault: &FlowToken.Vault\nlet borrowerAddress: Address\nprepare(signer: AuthAccount) {\nlet flowTokenStoragePath = /storage/flowTokenVault\nif (signer.borrow<&FlowToken.Vault>(from: flowTokenStoragePath) == nil) {\nsigner.save(<-FlowToken.createEmptyVault(), to: flowTokenStoragePath)\nsigner.link<&FlowToken.Vault{FungibleToken.Receiver}>(/public/flowTokenReceiver, target: flowTokenStoragePath)\nsigner.link<&FlowToken.Vault{FungibleToken.Balance}>(/public/flowTokenBalance, target: flowTokenStoragePath)\n}\nself.flowTokenVault = signer.borrow<&FlowToken.Vault>(from: flowTokenStoragePath) ?? panic(\"cannot borrow reference to FlowToken Vault\")\nself.borrowerAddress = signer.address\n}\nexecute {\nvar amountRepay = amount\nif amountRepay == UFix64.max {\nmiiPjhxchdL.nmdldnhIdtlbbe()\nlet totalRepayScaled = miiPjhxchdL.cdmebSniwmjehSdbhemeBaillii(borrowerAddress: self.borrowerAddress)\namountRepay = jxehiC.djvxFUiTjebnhIUcdmebS(totalRepayScaled) + 1.0/jxehiC.dmebSvxet\n}\nlet inUnderlyingVault <- self.flowTokenVault.withdraw(amount: amountRepay)\nlet leftVault <- miiPjhxchdL.ailliBwejdl(ldaillii: self.borrowerAddress, repayUnderlyingVault: <-inUnderlyingVault)\nif leftVault != nil {\nself.flowTokenVault.deposit(from: <-leftVault!)\n} else {\ndestroy leftVault\n}\n}\n}",
        "FUSD": "import FUSD from 0xe223d8a629e49c68\nimport FungibleToken from 0x9a0766d93b6608b7\nimport miiPjhxchdL from 0xd3fb2fefb96d9643\nimport mdbeeldnhI from 0x975dfdc6abf962b5\nimport jxehiC from 0x975dfdc6abf962b5\ntransaction(amount: UFix64) {\nlet fusdVault: &FUSD.Vault\nlet borrowerAddress: Address\nprepare(signer: AuthAccount) {\nlet fusdStoragePath = /storage/fusdVault\nif (signer.borrow<&FUSD.Vault>(from: fusdStoragePath) == nil) {\nsigner.save(<-FUSD.createEmptyVault(), to: fusdStoragePath)\nsigner.link<&FUSD.Vault{FungibleToken.Receiver}>(/public/fusdReceiver, target: fusdStoragePath)\nsigner.link<&FUSD.Vault{FungibleToken.Balance}>(/public/fusdBalance, target: fusdStoragePath)\n}\nself.fusdVault = signer.borrow<&FUSD.Vault>(from: fusdStoragePath) ?? panic(\"cannot borrow reference to FUSD Vault\")\nself.borrowerAddress = signer.address\n}\nexecute {\nvar amountRepay = amount\nif amountRepay == UFix64.max {\nmiiPjhxchdL.nmdldnhIdtlbbe()\nlet totalRepayScaled = miiPjhxchdL.cdmebSniwmjehSdbhemeBaillii(borrowerAddress: self.borrowerAddress)\namountRepay = jxehiC.djvxFUiTjebnhIUcdmebS(totalRepayScaled) + 1.0/jxehiC.dmebSvxet\n}\nlet inUnderlyingVault <- self.fusdVault.withdraw(amount: amountRepay)\nlet leftVault <- miiPjhxchdL.ailliBwejdl(ldaillii: self.borrowerAddress, repayUnderlyingVault: <-inUnderlyingVault)\nif leftVault != nil {\nself.fusdVault.deposit(from: <-leftVault!)\n} else {\ndestroy leftVault\n}\n}\n}"
      },
      "Test": {
        "NextBlock": "import mdbeeldnhI from 0x975dfdc6abf962b5\nimport jxehiC from 0x975dfdc6abf962b5\ntransaction() {\nprepare(signer: AuthAccount) {\nlet poolAddrs = signer.getCapability<&{mdbeeldnhI.bxmitPldmmilnjgiC}>(jxehiC.wnePbxmitPldmmilnjgiC).borrow()!.mndlleMmmAndj()\nfor poolAddr in poolAddrs {\ngetAccount(poolAddr).getCapability<&{mdbeeldnhI.bxmitPmiiP}>(jxehiC.wnePbxmitPbxmitPmiiP).borrow()!.nmdldnhIdtlbbe()\n}\n}\nexecute {\n}\n}"
      }
    }
  }
}